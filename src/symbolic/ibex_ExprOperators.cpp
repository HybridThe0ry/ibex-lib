//============================================================================
//                                  I B E X
// File        : ibex_ExprOperators.cpp
// Author      : Gilles Chabert
// Copyright   : Ecole des Mines de Nantes (France)
// License     : See the LICENSE file
// Created     : Sep 28, 2018
// Last update : Oct 02, 2018
//============================================================================

#include "ibex_ExprOperators.h"
#include "ibex_SyntaxError.h"

// ##################################################################
//         This part should be generated by install scripts
#include "ibex_sinc.h"
// ##################################################################

#include <sstream>

using namespace std;

namespace ibex {

const ExprGenericUnaryOp& ExprGenericUnaryOp::new_(const char* op_name, const ExprNode& expr) {
	ExprGenericUnaryOp::OperatorDef def = get(op_name);

	return *new ExprGenericUnaryOp(op_name, def, expr);
}


ExprGenericUnaryOp::ExprGenericUnaryOp(const char* op_name, const OperatorDef& def, const ExprNode& subexpr) :
		ExprUnaryOp(subexpr, def.dim), name(strdup(name)) {
	eval = def.eval;
	bwd = def.bwd;
	num_diff = def.num_diff;
	symb_diff = def.symb_diff;
}

#define ADD_OPERATOR(NAME,EVAL,BWD,NUM_DIFF,SYMB_DIFF) \
if (strcmp(op_name,NAME)==0) { \
	def.eval = &EVAL; \
	def.bwd = &BWD; \
	def.num_diff = &NUM_DIFF; \
	def.symb_diff = &SYMB_DIFF; \
	return def; \
}

ExprGenericUnaryOp::OperatorDef ExprGenericUnaryOp::get(const char* op_name) {
	
	OperatorDef def;
	
	// ##################################################################
	//         This part should be generated by install scripts
	// ##################################################################
	ADD_OPERATOR("sinc",sinc,sinc_bwd,dsinc,dsinc_symb);
	// ##################################################################

	stringstream ss;
	ss << "unkown operator \"" << op_name << "\"";
	throw SyntaxError(ss.str());
}

ExprGenericUnaryOp::eval_func ExprGenericUnaryOp::get_eval(const char* name) {
	return get(name).eval;
}

ExprGenericUnaryOp::~ExprGenericUnaryOp() {
	free((char*) name);
}

} // end namespace
