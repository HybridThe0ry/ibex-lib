//============================================================================
//                                  I B E X
// File        : ibex_ExprOperators.cpp
// Author      : Gilles Chabert
// Copyright   : Ecole des Mines de Nantes (France)
// License     : See the LICENSE file
// Created     : Sep 28, 2018
//============================================================================

#include "ibex_ExprOperators.h"
#include "ibex_SyntaxError.h"

#include <sstream>

using namespace std;

namespace ibex {

/** Forward evaluation.
 *  Set y to f(x). */
void sinc_fwd(const Domain& x, Domain& y) {
	y=sin(x)/x;
}

/** Backward evaluation.
 * Set x to (inv(f)(y) */
void sinc_bwd(Domain& x, const Domain& y) {
	x=sin(x)/y; // pessimistic...
}

/** Derivative.
 * Set g to df(x). */
void sinc_num_diff(const Domain& x, Domain& g) {
	g = cos(x)-sin(x)/sqr(x);
}

/** Derivative.
 * Set g to df(x). */
const ExprNode& sinc_symb_diff(const ExprNode& expr) {
	return cos(expr)-sin(expr)/sqr(expr);
}

const ExprGenericUnaryOp& ExprGenericUnaryOp::new_(std::string op_name, const ExprNode& expr, const Dim& dim) {
	return *new ExprGenericUnaryOp(op_name, expr, dim);
}


ExprGenericUnaryOp::ExprGenericUnaryOp(const char* op_name, const ExprNode& subexpr, const Dim& dim) :
		ExprUnaryOp(subexpr, dim), name(strdup(name)) {
	
	// ##################################################################
	//         This part should be generated by install scripts
	// ##################################################################
	if (op_name=="sinc") {
		fwd = &sinc_fwd;
		bwd = &sinc_bwd;
		num_diff = &sinc_num_diff;
		symb_diff = &sinc_symb_diff;
	}

	// ##################################################################

	stringstream ss;
	ss << "unkown operator \"" << op_name << "\"";
	throw SyntaxError(ss.str());
}

ExprGenericUnaryOp::~ExprGenericUnaryOp() {
	free((char*) name);
}
//
//Domain ExprGenericUnaryOp::eval(const Domain& x) const {
//	Domain y(dim);
//	fwd(x,y);
//	return y;
//}

} // end namespace